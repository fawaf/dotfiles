#!/bin/sh

# extract {{{
extract() { # Handy Extract Program.
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1     ;;
      *.tar.gz)    tar xvzf $1     ;;
      *.bz2)       bunzip2 $1      ;;
      *.rar)       unrar x $1      ;;
      *.gz)        gunzip $1       ;;
      *.tar)       tar xvf $1      ;;
      *.tbz2)      tar xvjf $1     ;;
      *.tgz)       tar xvzf $1     ;;
      *.zip)       unzip $1        ;;
      *.Z)         uncompress $1   ;;
      *.7z)        7z x $1         ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
# }}}

# ai {{{
ai() { # Get current host related info.
  echo -e "\nYou are logged in on host:"
  hostname
  echo -e "\nAdditional system information:"
  uname -a
  echo -e "\nUsers logged on:"
  w -h
  echo -e "\nCurrent date and time:"
  date
  echo -e "\nMachine uptime statistics:"
  uptime
  if [[ -z "$IP" && -z "$EXTERNALIP" ]]
  then
    echo "\nNot connected to the internet"
    return
  fi
  if [ "$EXTERNALIP" == "$IP" ]
  then
    echo -e "\nIP Address:"
    echo "$IP"
  else
    echo -e "\nExternal IP Address:"
    echo "$EXTERNALIP"
  fi
  if [[ "$IP" != "$EXTERNALIP" && -z "$IP" ]]
  then
    echo -e "\nInternal IP Address:"
    echo "$IP"
  fi
  echo ""
}
# }}}

# set term type {{{
settermtype() { # Set terminal type
  if type tput > /dev/null
  then # tput is installed
    local terminal_types
    set -A terminal_types screen-256color-bce screen-256color screen-bce \
    screen xterm-256color xterm-color xtermc xterm vt100 dumb
    
    # find $TERM in $terminal_types
    while [[ -z $terminal_types[1] && $terminal_types[1] != $TERM ]]
    do
      shift terminal_types
    done
    
    # as soon as we find a terminal type ncurses recognizes, choose it
    if [[ -z $terminal_types[1] ]]
    then
      for TERMTYPE in $terminal_types
      do
        if tput -T $TERMTYPE longname > /dev/null 2> /dev/null
        then 
          export TERM=$TERMTYPE
          break
        fi
      done
    fi
  fi
} 
# }}}

# parse IP {{{
#ip() { # Parse only the ip address
#  echo "$1" | /usr/bin/env grep -oE '([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'
#}
# }}}

# growl {{{
#growl() { # Growl notifications
#        echo -ne $'\e]9;'${*}'\007'
#}
# }}}

# Titlebars for GNU Screen and Xterm {{{
set_titlebar() {  
    # Set either xterm's titlebar or screen's hardstatus.
    # Usage:    set_titlebar short-title descriptive-title
    # eg.,      set_titlebar "user@host:~" "[~] vim"
    case $TERM in
        xterm*)
            # set a descriptive title for xterms
            # print -nR $'\033]0;'$2$'\a'
            echo -ne "\033]0;`hostname -f`\007"
        ;;
        # screen*)
            # set tab window title (%t)
            # print -nR $'\033k'`hostname -f`$'\033'\\\
            # and hardstatus of tab window (%h)
            # print -nR $'\033];'`hostname -f`$'\a'
        # ;;
        *)
            # all other terminals -- don't do anything
        ;;
    esac
}
# }}}

# get IP {{{
get_configured_ip() {
    if [ "`uname -a | grep grsec`" ]
    then
      return
    fi
    export CONFIGURED_IP="`ifconfig | grep -w inet | grep -v 127.0 | head -n 1 | awk '{print $2}'`"
    if [ -z "$CONFIGURED_IP" ]
    then
        echo '[1;31mNo IP address(es) detected[0;0m'
        return
    fi
    
    if [ "`echo $CONFIGURED_IP | grep addr | wc -l`" -eq 1 ]
    then
        IP="`echo $CONFIGURED_IP | cut -d : -f 2`"
    else
        IP="$CONFIGURED_IP"
    fi
}
# }}}

# set hostname variables {{{
set_host_variables() {
    get_configured_ip
    if [ -z "$IP" ]
    then
        export EXTERNALIP="127.0.0.1"
        export EXTERNALHOST="`hostname -f`"
        export INTERNALHOST="`hostname -f`"
        export EXTERNALHOSTNAME="`hostname -s`"
        export INTERNALHOSTNAME="`hostname -s`"
        export EXTERNALDOMAIN="`hostname -f`"
        export INTERNALDOMAIN="`hostname -f`"
    else
      which wget &> /dev/null
      if [ $? -eq 0 ]
      then
          export PUBLIC_IP="`wget -4 -q -O - -T 2 http://www.fawong.com/ip.php`"
      else
          export PUBLIC_IP="`curl -4 -L -sf -m 2 http://www.fawong.com/ip.php`"
      fi
      if [ "$PUBLIC_IP" == "$EXTERNALIP" ]
      then
          return
      fi
      
      if [ "$PUBLIC_IP" =~ "^[0-9].+" ]
      then
          export EXTERNALIP="$PUBLIC_IP"
          export EXTERNALHOST="`host $EXTERNALIP | grep pointer | cut -d' ' -f5 | sed 's/.$//'`"
          export INTERNALHOST="`host $IP | grep pointer | cut -d' ' -f5 | sed 's/.$//'`"
          export EXTERNALHOSTNAME="`echo $EXTERNALHOST | cut -d'.' -f1`"
          export INTERNALHOSTNAME="`echo $INTERNALHOST | cut -d'.' -f1`"
          export EXTERNALDOMAIN="`echo $EXTERNALHOST | cut -d'.' -f2-`"
          export INTERNALDOMAIN="`echo $INTERNALHOST | cut -d'.' -f2-`"
      fi
    fi

    if [ x"$1" == x"" ]
    then
        if [ x"$EXTERNALHOST" != x"" ]
        then
            export REALHOST="$EXTERNALHOST"
        elif [ x"$INTERNALHOST" != x"" ]
        then
            export REALHOST="$INTERNALHOST"
        else
            export REALHOST="`hostname -f`"
        fi
    else
        export REALHOST="$1"
    fi
}
# }}}
