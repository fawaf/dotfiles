#!/usr/bin/env python3

import os
import argparse
import pathlib
import shutil
import tempfile
import base64

import waflibs


def backup_and_remove(dest):
    logger.debug("backing up and removing {}".format(dest))
    dest_bak = get_dest_location(f"{dest}.bak")
    logger.debug("back up entry {}".format(dest_bak))

    if dest.is_dir():
        if dest_bak.is_dir():
            logger.debug(f"removing backup dir: {dest_bak}")
            shutil.rmtree(dest_bak)
        logger.debug(f"backing up dir {dest} to {dest_bak}")
        shutil.copytree(dest, dest_bak)
    else:
        logger.debug(f"backing up file {dest} to {dest_bak}")
        try:
            shutil.copy2(dest, dest_bak)
        except FileNotFoundError as e:
            logger.debug(f"ignoring error: {e}")

    if os.path.exists(dest):
        remove(dest)


def remove(dest):
    if dest.is_dir():
        logger.debug(f"removing dest dir: {dest}")

        shutil.rmtree(dest)
    else:
        logger.debug(f"removing dest: {dest}")
        dest.unlink(missing_ok=True)


def get_dest_location(dest):
    logger.debug(f"get dest location - original dest: {dest}")

    real_dest = pathlib.Path(dest)

    if DOTFILES_DIR.name in str(dest):
        dest = [home_dir, f".{os.path.relpath(dest, start=DOTFILES_DIR)}"]
        real_dest = pathlib.Path(*dest)
    logger.debug(f"get dest location - dest path: {dest}")

    logger.debug(f"get dest location - real dest path: {real_dest}")

    return real_dest

DOTFILES_DIR = pathlib.Path(__file__).absolute().parent

parser = argparse.ArgumentParser()
waflibs.arg_parse.enable_verbose_logging(parser)
waflibs.arg_parse.enable_dry_run(parser)
parser.add_argument(
    "-f", "--force", action="store_true", help="do not force commands"
)
parser.add_argument("-e", "--dev", action="store_true", help="dev mode")
parser.add_argument(
    "-c",
    "--config",
    type=str,
    default="{}/config.json".format(DOTFILES_DIR),
    help="config file",
)
parser.add_argument("-i", "--dir", "--directory", help="directory to use")
parser.add_argument("-t", "--test", action="store_true", help="run test")
args = parser.parse_args()

dev = args.dev
force = args.force
config_file = args.config
directory = args.dir
test = args.test

config = waflibs.config.parse_json_file(config_file)

if test:
    dev = True

    DOTFILES_DIR = pathlib.Path(DOTFILES_DIR, "test")
    config = waflibs.config.parse_json_file(pathlib.Path(DOTFILES_DIR, "config.json"))

    random = base64.b64encode(os.urandom(22))

    for root, dirs, files in os.walk(DOTFILES_DIR):
        for fl in files:
            if "config.json" == fl:
                continue
            f = open(pathlib.Path(root, fl), "w")
            f.write(str(random))
            f.close()

if dev:
    temp_dir = tempfile.TemporaryDirectory()
    home_dir = pathlib.Path(temp_dir.name).absolute()
    print(f"home dir to check: {home_dir}")

    args.verbose = True
elif directory:
    home_dir = pathlib.Path(directory)
else:
    home_dir = pathlib.Path(os.environ["HOME"]).absolute()

logger = waflibs.log.create_logger(args)
verbose = args.verbose

logger.debug("using home dir: {}".format(home_dir))

logger.debug("args: {}".format(args))

os.chdir(DOTFILES_DIR)

print("updating repo... ", end="")
cmd = "git pull"
logger.debug("command to run: {}".format(cmd))
pull_stdout, pull_stderr, _ = waflibs.utils.shell_command(
    cmd.split(" "), cwd=DOTFILES_DIR
)
print("done.")
logger.debug("pull stdout: {}".format(pull_stdout))
logger.debug("pull stderr: {}".format(pull_stderr))

print("submodule init... ", end="")
cmd = "git submodule init"
logger.debug("command to run: {}".format(cmd))
init_stdout, init_stderr, _ = waflibs.utils.shell_command(
    cmd.split(" "), cwd=DOTFILES_DIR
)
print("done.")
logger.debug("init stdout: {}".format(init_stdout))
logger.debug("init stderr: {}".format(init_stderr))

print("submodule sync... ", end="")
cmd = "git submodule sync"
logger.debug("command to run: {}".format(cmd))
sync_stdout, sync_stderr, _ = waflibs.utils.shell_command(
    cmd.split(" "), cwd=DOTFILES_DIR
)
print("done.")
logger.debug("sync stdout: {}".format(sync_stdout))
logger.debug("sync stderr: {}".format(sync_stderr))

print("submodule update... ", end="")
cmd = "git submodule update"
logger.debug("command to run: {}".format(cmd))
update_stdout, update_stderr, _ = waflibs.utils.shell_command(
    cmd.split(" "), cwd=DOTFILES_DIR
)
print("done.")
logger.debug("update stdout: {}".format(update_stdout))
logger.debug("update stderr: {}".format(update_stderr))

logger.debug("config: {}".format(config))
logger.debug("dotfiles dir: {}".format(DOTFILES_DIR))

print("setting up dotfiles... ", end="")
for root_entry in DOTFILES_DIR.glob("*"):
    root_entry_name = root_entry.name
    logger.debug("root level entry name is {}".format(root_entry_name))

    logger.debug("top level entry is {}".format(root_entry))
    if root_entry_name.startswith(
        (
            "README",
            "LICENSE",
            "setup",
            "config.json",
            "Makefile",
            "update-",
            ".git",
        )
    ):
        logger.debug("ignoring entry {}".format(root_entry))

        continue
    elif root_entry_name.startswith("test") and not test:
        logger.debug("ignoring entry {} as testing is not in progress".format(root_entry))
        continue

    root_dest_dir = get_dest_location(root_entry)
    if not root_dest_dir.is_dir():
        logger.debug(f"{root_dest_dir} directory does not exist, creating...")

        root_dest_dir.mkdir()

    if root_entry.is_dir():
        logger.debug(f"root entry is dir: {root_entry}")

        for entry in root_entry.glob("*"):
            entry_name = entry.name
            logger.debug(f"entry: {entry}")
            logger.debug(f"entry name: {entry_name}")

            if entry_name in config["append"]["root"]:
                logger.debug("appending to root directory {}".format(dest))

                dest = get_dest_location(entry)
                logger.debug("dest is {}".format(dest))

                if not dest.is_dir():
                    logger.debug("{} is not a directory, creating...".format(dest))

                    dest.mkdir()

                for e in entry.glob("*"):
                    logger.debug(f"root entry: {e}")
                    logger.debug(f"dest: {dest}")
                    logger.debug("copying root entry {} to dest {}".format(e, dest))

                    backup_and_remove(pathlib.Path(f"{dest}/{os.path.basename(e)}"))

                    if e.is_dir():
                        shutil.copytree(e, dest, dirs_exist_ok=True)
                    else:
                        shutil.copy2(e, dest)
            elif entry.is_dir():
                for sub_entry in entry.glob("*"):
                    sub_entry_name = sub_entry.name
                    logger.debug(f"sub entry: {sub_entry}")
                    logger.debug(f"sub entry name: {sub_entry_name}")

                    sub_entry_dest_dir = get_dest_location(sub_entry)
                    if not sub_entry_dest_dir.is_dir():
                        logger.debug(f"{sub_entry_dest_dir} directory does not exist, creating...")

                        sub_entry_dest_dir.mkdir()

                    if sub_entry_name in config["append"]:
                        if type(config["append"][sub_entry_name]) == list:
                            logger.debug("sub entry is array, hence append: {}".format(entry_name))

                            for entry_dir in config["append"][entry_name]:
                                logger.debug(f"append entry dir: {entry_dir}")

                                for ent in pathlib.Path(entry_name, entry_dir).glob("*"):
                                    real_ent = pathlib.Path(ent)
                                    logger.debug(f"real entry: {real_ent}")
                                    real_dest = pathlib.Path(dest, entry_dir, real_ent.name)
                                    logger.debug(f"real dest: {real_dest}")

                                    logger.debug(
                                        "copying entry {} to dest {}".format(real_ent, real_dest)
                                    )

                                    backup_and_remove(real_dest)

                                    if real_ent.is_dir():
                                        shutil.copytree(real_ent, real_dest, ignore_dangling_symlinks=True)
                                    else:
                                        shutil.copy2(real_ent, real_dest, follow_symlinks=False)
                        else:
                            logger.debug(f"not a sub entry append: {sub_entry}")

                            dest_path = get_dest_location(sub_entry)
                            backup_and_remove(dest_path)

                            shutil.copy2(sub_entry, dest_path, follow_symlinks=False)
                    else:
                        logger.debug(f"not an append dir, but file: {sub_entry}")

                        dest_path = get_dest_location(sub_entry)
                        backup_and_remove(dest_path)

                        shutil.copy2(sub_entry, dest_path, follow_symlinks=False)
            else:
                logger.debug(f"entry is regular file: {entry}")

                dest = get_dest_location(entry)
                logger.debug("dest is {}".format(dest))

                backup_and_remove(dest)

                shutil.copy2(entry, dest, follow_symlinks=False)
        print(waflibs.utils.divider(char="+"))
    else:
        logger.debug(f"root entry is not dir: {entry_name}")

        dest = get_dest_location(root_entry)
        logger.debug("dest is {}".format(dest))

        backup_and_remove(dest)

        logger.debug("copying entry {} to dest {}".format(root_entry, dest))
        shutil.copy2(root_entry, dest, follow_symlinks=False)
    print(waflibs.utils.divider(char="-", times=77))
print("done.")

custom_setup_script = pathlib.Path("setup-custom")
if custom_setup_script.is_file():
    print(waflibs.utils.divider(char="*", times=77))

    print(
        "running custom setup script {}... ".format(custom_setup_script),
        end="",
    )

    cmd = [
        "./{}".format(custom_setup_script),
        "-vvvvvv" if verbose else "",
        "-ffffff" if force else "",
    ]
    logger.debug("command to run: {}".format(cmd))
    custom_stdout, custom_stderr, _ = waflibs.utils.shell_command(cmd)
    logger.debug("custom stdout: {}".format(custom_stdout))
    logger.debug("custom stderr: {}".format(custom_stderr))

    print("done.")
