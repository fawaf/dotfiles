#!/usr/bin/env python3

import os
import argparse
import pathlib
import shutil
import tempfile
import base64

import waflibs


def backup_and_remove(dest):
    logger.debug("backing up and removing {}".format(dest))
    dest_bak = pathlib.Path("{}.bak".format(dest))
    logger.debug("back up entry {}".format(dest_bak))

    if dest.is_dir():
        if dest_bak.is_dir():
            shutil.rmtree(dest_bak)
            shutil.copytree(dest, dest_bak)
        shutil.rmtree(dest)
    else:
        try:
            shutil.copy2(dest, dest_bak)
            dest.unlink(missing_ok=True)
        except FileNotFoundError as e:
            logger.debug("ignoring error: {}".format(e))


DOTFILES_DIR = pathlib.Path(__file__).absolute().parent

parser = argparse.ArgumentParser()
waflibs.arg_parse.enable_verbose_logging(parser)
waflibs.arg_parse.enable_dry_run(parser)
parser.add_argument(
    "-f", "--force", action="store_true", help="do not force commands"
)
parser.add_argument("-e", "--dev", action="store_true", help="dev mode")
parser.add_argument(
    "-c",
    "--config",
    type=str,
    default="{}/config.json".format(DOTFILES_DIR),
    help="config file",
)
parser.add_argument("-i", "--dir", "--directory", help="directory to use")
parser.add_argument("-t", "--test", action="store_true", help="run test")
args = parser.parse_args()

logger = waflibs.log.create_logger(args)

logger.debug("args: {}".format(args))

dev = args.dev
verbose = args.verbose
force = args.force
config_file = args.config
directory = args.dir
test = args.test

if dev:
    temp_dir = tempfile.TemporaryDirectory()
    home_dir = pathlib.Path(temp_dir.name).absolute()
    verbose = True
elif directory:
    home_dir = directory
else:
    home_dir = pathlib.Path(os.environ["HOME"]).absolute()
logger.debug("using home dir: {}".format(home_dir))

os.chdir(DOTFILES_DIR)

print("updating repo... ", end="")
cmd = "git pull"
logger.debug("command to run: {}".format(cmd))
pull_stdout, pull_stderr, _ = waflibs.utils.shell_command(
    cmd.split(" "), cwd=DOTFILES_DIR
)
print("done.")
logger.debug("pull stdout: {}".format(pull_stdout))
logger.debug("pull stderr: {}".format(pull_stderr))

print("submodule init... ", end="")
cmd = "git submodule init"
logger.debug("command to run: {}".format(cmd))
init_stdout, init_stderr, _ = waflibs.utils.shell_command(
    cmd.split(" "), cwd=DOTFILES_DIR
)
print("done.")
logger.debug("init stdout: {}".format(init_stdout))
logger.debug("init stderr: {}".format(init_stderr))

print("submodule sync... ", end="")
cmd = "git submodule sync"
logger.debug("command to run: {}".format(cmd))
sync_stdout, sync_stderr, _ = waflibs.utils.shell_command(
    cmd.split(" "), cwd=DOTFILES_DIR
)
print("done.")
logger.debug("sync stdout: {}".format(sync_stdout))
logger.debug("sync stderr: {}".format(sync_stderr))

print("submodule update... ", end="")
cmd = "git submodule update"
logger.debug("command to run: {}".format(cmd))
update_stdout, update_stderr, _ = waflibs.utils.shell_command(
    cmd.split(" "), cwd=DOTFILES_DIR
)
print("done.")
logger.debug("update stdout: {}".format(update_stdout))
logger.debug("update stderr: {}".format(update_stderr))

config = waflibs.config.parse_json_file(config_file)

if test:
    DOTFILES_DIR = pathlib.Path(DOTFILES_DIR, "test")
    config = {"append": {"root": ["rootdir"], "rootsubdir": ["subdir"]}}

    random = base64.b64encode(os.urandom(22))

    for root, dirs, files in os.walk(DOTFILES_DIR):
        for fl in files:
            f = open(pathlib.Path(root, fl), "w")
            f.write(str(random))
            f.close()

logger.debug("config: {}".format(config))
logger.debug("dotfiles dir: {}".format(DOTFILES_DIR))

print("setting up dotfiles... ", end="")
for entry in DOTFILES_DIR.glob("*"):
    entry_name = entry.name
    logger.debug("entry name is {}".format(entry_name))

    logger.debug("entry is {}".format(entry))
    if entry_name.startswith(
        (
            "README",
            "LICENSE",
            "setup",
            "config.json",
            "Makefile",
            "update-",
            ".git",
        )
    ):
        logger.debug("ignoring entry {}".format(entry))

        continue

    dest = pathlib.Path(home_dir, ".{}".format(entry_name))
    logger.debug("dest is {}".format(dest))

    if entry_name in config["append"]["root"]:
        logger.debug("appending to root directory {}".format(dest))

        if not dest.is_dir():
            logger.debug("{} is not a directory, creating...".format(dest))

            dest.mkdir()

        for e in entry.glob("*"):
            logger.debug("copying root entry {} to dest {}".format(e, dest))

            if e.is_dir():
                shutil.copytree(str(e), str(dest), dirs_exist_ok=True)
            else:
                shutil.copy2(str(e), str(dest))
    elif (
        entry_name in config["append"]
        and type(config["append"][entry_name]) == list
    ):
        logger.debug("append entry is array: {}".format(entry_name))

        for ent in pathlib.Path(entry_name).glob("*"):
            real_ent = pathlib.Path(ent)
            real_dest = pathlib.Path(str(dest), str(real_ent.name))

            logger.debug(
                "copying entry {} to dest {}".format(real_ent, real_dest)
            )

            backup_and_remove(real_dest)

            if real_ent.is_dir():
                shutil.copytree(str(real_ent), str(real_dest))
            else:
                shutil.copy2(str(real_ent), str(real_dest))
    else:
        backup_and_remove(dest)

        logger.debug("copying entry {} to dest {}".format(entry, dest))
        if entry.is_dir():
            shutil.copytree(str(entry), str(dest), dirs_exist_ok=True)
        else:
            try:
                shutil.copy2(str(entry), str(dest), follow_symlinks=False)
            except FileExistsError as e:
                logger.debug("")
print("done.")

custom_setup_script = pathlib.Path("setup-custom")
if custom_setup_script.is_file():
    waflibs.utils.divider(char="*", times=77)

    print(
        "running custom setup script {}... ".format(custom_setup_script),
        end="",
    )

    cmd = [
        "./{}".format(custom_setup_script),
        "-vvvvvv" if verbose else "",
        "-ffffff" if force else "",
    ]
    logger.debug("command to run: {}".format(cmd))
    custom_stdout, custom_stderr, _ = waflibs.utils.shell_command(cmd)
    logger.debug("custom stdout: {}".format(custom_stdout))
    logger.debug("custom stderr: {}".format(custom_stderr))

    print("done.")
