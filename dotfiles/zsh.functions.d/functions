#!/bin/bash

# extract {{{
extract() { # Handy Extract Program.
  if [[ -f "$1" ]]
  then
    case "$1" in
      *.7z)
        7z x "$1"
        ;;
      *.rar)
        unrar x "$1"
        ;;
      *.tar.bz2)
        tar xvjf "$1"
        ;;
      *.tar.gz)
        tar xvzf "$1"
        ;;
      *.tar)
        tar xvf "$1"
        ;;
      *.tbz2)
        tar xvjf "$1"
        ;;
      *.bz2)
        bunzip2 "$1"
        ;;
      *.gz)
        gunzip "$1"
        ;;
      *.tgz)
        tar xvzf "$1"
        ;;
      *.xz)
        tar xvf "$1"
        ;;
      *.zip)
        unzip "$1"
        ;;
      *.Z)
        uncompress "$1"
        ;;
      *)
        echo "'$1' cannot be extracted via >extract<"
        ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
# }}}

# ai {{{
ai() { # Get current host related info.
  printf "You are logged in on host: %s\n" "$(hostname)"
  echo
  printf "Additional system information: %s\n" "$(uname -a)"
  echo
  printf "Users logged on: %s\n" "$(w -h)"
  echo
  printf "Current date and time: %s\n" "$(date)"
  echo
  printf "Machine uptime statistics: %s\n" "$(uptime)"
  echo "==================================================================================================="
  echo "network info"
  echo
  if [[ -z "$HOST_IP" && -z "$EXTERNALIP" ]]
  then
    printf "Not connected to the internet\n"
    return
  fi
  if [[ "$EXTERNALIP" == "$HOST_IP" ]]
  then
    printf "IP Address: %s\n" "$HOST_IP"
  else
    printf "External IP Address: %s\n" "$EXTERNALIP"
  fi
  if [[ "$HOST_IP" != "$EXTERNALIP" && -n "$HOST_IP" ]]
  then
    printf "Internal IP Address: %s\n" "$HOST_IP"
  fi
}
# }}}

# take {{{
take() {
  mkdir -p "$@" && cd "${@:$#}" || exit
}
# }}}

# open command {{{
open_command() {
  local open_cmd

  # define the open command
  case "$OSTYPE" in
    darwin*)
      open_cmd='open'
      ;;
    cygwin*)
      open_cmd='cygstart'
      ;;
    linux*)
      [[ "$(uname -r)" != *icrosoft* ]] && open_cmd='nohup xdg-open' || {
        open_cmd="cmd.exe /c start ''"
              [[ -e "$1" ]] && ( 1="$(wslpath -w "${1:a}")" || return 1 )
            }
            ;;
          msys*)
            open_cmd='start ""'
            ;;
          *)
            echo "Platform $OSTYPE not supported"
            return 1
            ;;
        esac

        ${=open_cmd} "$@" &>/dev/null
      }
      # }}}

# exponential backoff {{{
exponential_backoff() {
  # Exponential backoff: retries a command upon failure, scaling up the delay between retries.
  # Example: "expbackoff my_command --with --some --args --maybe"
  local MAX_RETRIES=${EXPBACKOFF_MAX_RETRIES:-19} # Max number of retries
  local BASE=${EXPBACKOFF_BASE:-1} # Base value for backoff calculation
  local MAX=${EXPBACKOFF_MAX:-9999999} # Max value for backoff calculation
  local FAILURES=0

  while ! "$@"; do
    FAILURES=$(( $FAILURES + 1 ))
    if (( $FAILURES > $MAX_RETRIES )); then
      echo "$@" >&2
      echo " * Failed, max retries exceeded" >&2
      return 1
    else
      local SECONDS=$(( $BASE * 2 ** ($FAILURES - 1) ))
      if (( $SECONDS > $MAX )); then
        SECONDS=$MAX
      fi
      echo "$@" >&2
      echo_color red " * $FAILURES failure(s), retrying in $SECONDS second(s)" >&2
      sleep $SECONDS
      echo
    fi
  done
}
expbackoff=exponential_backoff
# }}}
