#!/bin/bash

# echo with color {{{
echo_color() {
  MESSAGE="$2"

  case "$1" in
    red)
      echo "[1;31m${MESSAGE}[0;0m"
      ;;
    green)
      echo "[1;32m${MESSAGE}[0;0m"
      ;;
  esac
}
# }}}

# extract {{{
extract() { # Handy Extract Program.
  if [[ -f "$1" ]]
  then
    case "$1" in
      *.7z)
        7z x "$1"
      ;;
      *.rar)
        unrar x "$1"
      ;;
      *.tar.bz2)
        tar xvjf "$1"
      ;;
      *.tar.gz)
        tar xvzf "$1"
      ;;
      *.tar)
        tar xvf "$1"
      ;;
      *.tbz2)
        tar xvjf "$1"
      ;;
      *.bz2)
        bunzip2 "$1"
      ;;
      *.gz)
        gunzip "$1"
      ;;
      *.tgz)
        tar xvzf "$1"
      ;;
      *.xz)
        tar xvf "$1"
      ;;
      *.zip)
        unzip "$1"
      ;;
      *.Z)
        uncompress "$1"
      ;;
      *)
        echo "'$1' cannot be extracted via >extract<"
      ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
# }}}

# set term type {{{
settermtype() { # Set terminal type
  if type tput > /dev/null
  then # tput is installed
    local terminal_types
    set -A terminal_types screen-256color-bce screen-256color screen-bce \
    screen xterm-256color xterm-color xtermc xterm vt100 dumb

    # find $TERM in $terminal_types
    while [[ -z ${terminal_types[1]} && ${terminal_types[1]} != "$TERM" ]]
    do
      shift terminal_types
    done

    # as soon as we find a terminal type ncurses recognizes, choose it
    if [[ -z ${terminal_types[1]} ]]
    then
      for TERMTYPE in $terminal_types
      do
        if tput -T "$TERMTYPE" longname > /dev/null 2> /dev/null
        then
          TERM=$TERMTYPE
          export TERM
          break
        fi
      done
    fi
  fi
}
# }}}

# growl {{{
#growl() { # Growl notifications
#        echo -ne $'\e]9;'${*}'\007'
#}
# }}}

# Titlebars for GNU Screen and Xterm {{{
set_titlebar() {
    # Set either xterm's titlebar or screen's hardstatus.
    # Usage:    set_titlebar short-title descriptive-title
    # eg.,      set_titlebar "user@host:~" "[~] vim"
    case $TERM in
        xterm*)
            # set a descriptive title for xterms
            # print -nR $'\033]0;'$2$'\a'
            echo -ne "\033]0;$(hostname -f)\007"
        ;;
        # screen*)
            # set tab window title (%t)
            # print -nR $'\033k'$(hostname -f)$'\033'\\\
            # and hardstatus of tab window (%h)
            # print -nR $'\033];'$(hostname -f)$'\a'
        # ;;
        *)
            # all other terminals -- don't do anything
        ;;
    esac
}
# }}}

# get IP {{{
get_configured_ip() {
    if ! type ifconfig &> /dev/null
    then
        return
    fi

    if [[ -n "$OVERRIDE_NIC" ]]
    then
        NIC="$OVERRIDE_NIC"
    elif [[ -n "$OVERRIDE_INTERFACE" ]]
    then
        NIC="$OVERRIDE_INTERFACE"
    else
        if uname -a | \grep grsec &> /dev/null
        then
            return
        elif uname -a | \grep --ignore-case cygwin &> /dev/null
        then
            HOST_IP="$(ifconfig | \grep --ignore-case "ipv4 address"| head -1 | cut -d: -f2 | cut -d"(" -f1 | cut -d" " -f2)"
        elif uname -a | \grep --ignore-case darwin &> /dev/null
        then
          IFACE_PREFIX="en"
          for i in {0..9}
          do
              if ifconfig "$IFACE_PREFIX""$i" 2> /dev/null | \grep --word-regexp --quiet active && ifconfig "$IFACE_PREFIX""$i" 2> /dev/null | \grep --word-regexp --quiet inet
              then
                HOST_IP="$(ifconfig "$IFACE_PREFIX""$i" | \grep --word-regexp inet | tail -1 | awk '{print $2}')"

                break
              fi
          done
        elif uname -a | \grep --ignore-case linux &> /dev/null
        then
            NIC="$(ip addr | \grep --invert-match NO-CARRIER | \grep -E "\<.*,?UP,?.*\>" | \grep --invert-match lo | head -1 | cut -d" " -f2 | cut -d":" -f1)"
        else
            echo "Unsupported OS while determining host IP"
        fi
    fi
    INTERFACE="$NIC"
    export INTERFACE

    if [[ -n "${NIC}" ]]
    then
        HOST_IP="$(ifconfig "${NIC}" | \grep -w inet | \grep -v 127.0 | head -n 1 | awk '{print $2}')"
    fi

    if [[ -z "$HOST_IP" ]]
    then
        return
    else
        if [[ "$(echo "$HOST_IP" | \grep -c addr)" -eq 1 ]]
        then
            CONFIGURED_IP="$(echo "$HOST_IP" | cut -d : -f 2)"
        else
            CONFIGURED_IP="$HOST_IP"
        fi

        export HOST_IP
        export CONFIGURED_IP
    fi
}
# }}}

# set hostname variables {{{
set_local_internal_host_variables() {
    INTERNALIP="NONE"
    INTERNALHOST="$(hostname -f)"
    INTERNALDOMAIN="$(hostname -f)"
    INTERNALHOSTNAME="$(hostname -s)"
}

set_local_external_host_variables() {
    EXTERNALIP="NONE"
    EXTERNALHOST="$(hostname -f)"
    EXTERNALDOMAIN="$(hostname -f)"
    EXTERNALHOSTNAME="$(hostname -s)"
}

set_local_host_variables() {
    set_local_internal_host_variables
    set_local_external_host_variables
}

set_host_variables() {
    get_configured_ip

    if [[ -z "$CONFIGURED_IP" ]]
    then
        set_local_host_variables
    else
        if [[ -z "$DISABLE_PUBLIC_IP_CHECK" ]]
        then
            if which curl &> /dev/null
            then
                PUBLIC_IP="$(curl -4 --silent --fail --max-time 2 https://www.waf.hk/ip)"
            else
                PUBLIC_IP="$(wget -4 --quiet --output-document=- --timeout=2 https://www.waf.hk/ip)"
            fi

            LOCAL_NAMESERVER="$(\grep nameserver /etc/resolv.conf | head -1 | awk '{print $NF}')"
            if [[ "$PUBLIC_IP" =~ ^[0-9].+ ]]
            then
                EXTERNALIP="$PUBLIC_IP"
                EXTERNALHOST="$(/usr/bin/dig +short -x "$EXTERNALIP" @"$LOCAL_NAMESERVER" | head -1 | sed 's/\.$//')"
                EXTERNALHOSTNAME="$(echo "$EXTERNALHOST" | cut -d"." -f1)"
                EXTERNALDOMAIN="$(echo "$EXTERNALHOST" | cut -d"." -f2-)"

                if [[ -z "$DISABLE_PRIVATE_IP_CHECK" ]]
                then
                    INTERNALIP="$CONFIGURED_IP"
                    export INTERNALIP
                    if [[ "$EXTERNALIP" == "$INTERNALIP" ]]
                    then
                        INTERNALHOST="$EXTERNALHOST"
                        INTERNALHOSTNAME="$EXTERNALHOSTNAME"
                        INTERNALDOMAIN="$EXTERNALDOMAIN"
                    else
                        INTERNALHOST="$(/usr/bin/dig +short -x "$INTERNALIP" @"$LOCAL_NAMESERVER" | head -1 | sed "s/\.$//")"
                        INTERNALHOSTNAME="$(echo "$INTERNALHOST" | cut -d"." -f1)"
                        INTERNALDOMAIN="$(echo "$INTERNALHOST" | cut -d"." -f2-)"
                    fi
                else
                    set_local_internal_host_variables
                fi
            fi
        else
            set_local_external_host_variables
        fi
    fi

    HOST="$1"
    if [[ "$HOST" == "" ]]
    then
        if [[ x"$EXTERNALHOST" != x"" ]]
        then
            REALHOST="$EXTERNALHOST"
        elif [[ x"$INTERNALHOST" != x"" ]]
        then
            REALHOST="$INTERNALHOST"
        else
            REALHOST="$(hostname -f)"
        fi
    else
        REALHOST="$HOST"
    fi

    HOSTNAME="$(hostname)"
    FULL_HOSTNAME="$(hostname -f)"
    export HOSTNAME
    export FULL_HOSTNAME
    export INTERNALIP
    export INTERNALHOST
    export INTERNALDOMAIN
    export INTERNALHOSTNAME
    export EXTERNALIP
    export EXTERNALHOST
    export EXTERNALDOMAIN
    export EXTERNALHOSTNAME
    export REALHOST
    export PUBLIC_IP
}
# }}}

# ai {{{
ai() { # Get current host related info.
  printf "You are logged in on host: %s\n" "$(hostname)"
  echo
  printf "Additional system information: %s\n" "$(uname -a)"
  echo
  printf "Users logged on: %s\n" "$(w -h)"
  echo
  printf "Current date and time: %s\n" "$(date)"
  echo
  printf "Machine uptime statistics: %s\n" "$(uptime)"
  echo "==================================================================================================="
  echo "network info"
  echo
  if [[ -z "$HOST_IP" && -z "$EXTERNALIP" ]]
  then
    printf "Not connected to the internet\n"
    return
  fi
  if [[ "$EXTERNALIP" == "$HOST_IP" ]]
  then
    printf "IP Address: %s\n" "$HOST_IP"
  else
    printf "External IP Address: %s\n" "$EXTERNALIP"
  fi
  if [[ "$HOST_IP" != "$EXTERNALIP" && -n "$HOST_IP" ]]
  then
    printf "Internal IP Address: %s\n" "$HOST_IP"
  fi
}
# }}}

# take {{{
take() {
  mkdir -p "$@" && cd "${@:$#}" || exit
}
# }}}

# open command {{{
open_command() {
  local open_cmd

  # define the open command
  case "$OSTYPE" in
    darwin*)
      open_cmd='open'
      ;;
    cygwin*)
      open_cmd='cygstart'
      ;;
    linux*)
      [[ "$(uname -r)" != *icrosoft* ]] && open_cmd='nohup xdg-open' || {
                open_cmd="cmd.exe /c start ''"
                [[ -e "$1" ]] && ( 1="$(wslpath -w "${1:a}")" || return 1 )
              }
              ;;
    msys*)
      open_cmd='start ""'
      ;;
    *)
      echo "Platform $OSTYPE not supported"
      return 1
      ;;
  esac

  ${=open_cmd} "$@" &>/dev/null
}
# }}}

# os-dependent sourcing {{{
source_os_dotfiles() {
  TYPE="$1"

  KERNEL_NAME="$(uname)"

  if [[ "$KERNEL_NAME" == "Linux" ]]; then
      source "$HOME"/."${TYPE}"-linux

      if [[ -f /etc/debian_version ]]; then
          source "$HOME"/."${TYPE}"-debian
      fi
      if [[ -f /etc/SuSE-release ]]; then
          source "$HOME"/."${TYPE}"-suse
      fi
      if [[ -f /etc/redhat-release ]]; then
          source "$HOME"/."${TYPE}"-fedora
      fi
  elif [[ "$KERNEL_NAME" == "Darwin" ]]; then
      source "$HOME"/."${TYPE}"-darwin
  elif [[ "$KERNEL_NAME" =~ "CYGWIN_NT" ]]; then
      source "$HOME"/."${TYPE}"-cygwin
  fi

  if [ -f "$HOME/.${TYPE}-custom" ]
  then
      source "$HOME/.${TYPE}-custom"
  fi
}
# }}}

# exponential backoff {{{
expbackoff() {
    # Exponential backoff: retries a command upon failure, scaling up the delay between retries.
    # Example: "expbackoff my_command --with --some --args --maybe"
    local MAX_RETRIES=${EXPBACKOFF_MAX_RETRIES:-19} # Max number of retries
    local BASE=${EXPBACKOFF_BASE:-1} # Base value for backoff calculation
    local MAX=${EXPBACKOFF_MAX:-9999999} # Max value for backoff calculation
    local FAILURES=0

    while ! "$@"; do
        FAILURES=$(( $FAILURES + 1 ))
        if (( $FAILURES > $MAX_RETRIES )); then
            echo "$@" >&2
            echo " * Failed, max retries exceeded" >&2
            return 1
        else
            local SECONDS=$(( $BASE * 2 ** ($FAILURES - 1) ))
            if (( $SECONDS > $MAX )); then
                SECONDS=$MAX
            fi
            echo "$@" >&2
            echo_color red " * $FAILURES failure(s), retrying in $SECONDS second(s)" >&2
            sleep $SECONDS
            echo
        fi
    done
}
# }}}
